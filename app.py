import streamlit as st
import os
import json
from datetime import datetime
from typing import List, Dict, Any

# Import local modules
from config import Config
from utils.file_processor import FileProcessor
from utils.graphrag_handler import GraphRAGHandler
from utils.visualization import GraphVisualization

# Page configuration
st.set_page_config(
    page_title=Config.APP_TITLE,
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize session state
if 'graphrag_handler' not in st.session_state:
    st.session_state.graphrag_handler = GraphRAGHandler(Config.WORKING_DIR)
if 'processed_files' not in st.session_state:
    st.session_state.processed_files = []
if 'query_history' not in st.session_state:
    st.session_state.query_history = []
if 'is_processing' not in st.session_state:
    st.session_state.is_processing = False

def main():
    """Main application function"""
    
    # Header
    st.title("üß† " + Config.APP_TITLE)
    st.markdown(f"**{Config.APP_DESCRIPTION}**")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # API Key input
        api_key = st.text_input(
            "OpenAI API Key",
            value=Config.OPENAI_API_KEY,
            type="password",
            help="Nh·∫≠p API key c·ªßa b·∫°n t·ª´ OpenAI"
        )
        
        if api_key:
            os.environ["OPENAI_API_KEY"] = api_key
        
        # Domain configuration
        st.subheader("üìù C·∫•u h√¨nh Domain")
        domain = st.text_area(
            "M√¥ t·∫£ domain:",
            value=Config.DEFAULT_DOMAIN,
            height=100,
            help="M√¥ t·∫£ lƒ©nh v·ª±c v√† m·ª•c ti√™u ph√¢n t√≠ch t√†i li·ªáu"
        )
        
        # Entity types
        st.subheader("üè∑Ô∏è Entity Types")
        entity_types_input = st.text_area(
            "C√°c lo·∫°i th·ª±c th·ªÉ (m·ªói d√≤ng m·ªôt lo·∫°i):",
            value="\n".join(Config.DEFAULT_ENTITY_TYPES),
            height=150,
            help="C√°c lo·∫°i th·ª±c th·ªÉ m√† b·∫°n mu·ªën GraphRAG nh·∫≠n di·ªán"
        )
        entity_types = [t.strip() for t in entity_types_input.split('\n') if t.strip()]
        
        # Example queries
        st.subheader("‚ùì Example Queries")
        example_queries_input = st.text_area(
            "C√°c c√¢u h·ªèi m·∫´u (m·ªói d√≤ng m·ªôt c√¢u h·ªèi):",
            value="\n".join(Config.DEFAULT_EXAMPLE_QUERIES),
            height=150,
            help="C√°c c√¢u h·ªèi m·∫´u ƒë·ªÉ GraphRAG hi·ªÉu c√°ch tr·∫£ l·ªùi"
        )
        example_queries = [q.strip() for q in example_queries_input.split('\n') if q.strip()]
        
        # Initialize GraphRAG button
        if st.button("üöÄ Kh·ªüi t·∫°o GraphRAG", type="primary"):
            with st.spinner("ƒêang kh·ªüi t·∫°o GraphRAG..."):
                success = st.session_state.graphrag_handler.initialize(
                    domain=domain,
                    entity_types=entity_types,
                    example_queries=example_queries
                )
                if success:
                    st.success("‚úÖ GraphRAG ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
                else:
                    st.error("‚ùå L·ªói khi kh·ªüi t·∫°o GraphRAG")
    
    # Main content area
    tab1, tab2, tab3, tab4 = st.tabs(["üìÅ Upload Files", "üîç Query", "üìä Visualization", "‚ÑπÔ∏è Info"])
    
    with tab1:
        st.header("üìÅ Upload v√† X·ª≠ l√Ω T√†i li·ªáu")
        
        # File upload
        uploaded_files = st.file_uploader(
            "Ch·ªçn t√†i li·ªáu ƒë·ªÉ ph√¢n t√≠ch",
            type=['txt', 'pdf', 'docx', 'md'],
            accept_multiple_files=True,
            help="H·ªó tr·ª£: TXT, PDF, DOCX, MD (t·ªëi ƒëa 200MB m·ªói file)"
        )
        
        if uploaded_files:
            # Process files
            if st.button("üîÑ X·ª≠ l√Ω Files", type="primary"):
                with st.spinner("ƒêang x·ª≠ l√Ω files..."):
                    processed_files = FileProcessor.process_uploaded_files(uploaded_files)
                    st.session_state.processed_files = processed_files
                    
                    if processed_files:
                        st.success(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(processed_files)} files!")
                        
                        # Show file info
                        st.subheader("üìã Th√¥ng tin Files")
                        for file_info in processed_files:
                            with st.expander(f"üìÑ {file_info['name']} ({file_info['size_mb']:.1f}MB)"):
                                preview = FileProcessor.get_file_preview(file_info['content'])
                                st.text(preview)
        
        # Show processed files
        if st.session_state.processed_files:
            st.subheader("üìö Files ƒë√£ x·ª≠ l√Ω")
            
            # File statistics
            total_size = sum(f['size_mb'] for f in st.session_state.processed_files)
            file_types = {}
            for f in st.session_state.processed_files:
                file_type = f['type']
                file_types[file_type] = file_types.get(file_type, 0) + 1
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªïng s·ªë files", len(st.session_state.processed_files))
            with col2:
                st.metric("T·ªïng dung l∆∞·ª£ng", f"{total_size:.1f} MB")
            with col3:
                st.metric("Lo·∫°i files", len(file_types))
            
            # Insert into GraphRAG
            if st.session_state.graphrag_handler.is_initialized:
                if st.button("üì• Th√™m v√†o GraphRAG", type="primary"):
                    with st.spinner("ƒêang th√™m t√†i li·ªáu v√†o GraphRAG..."):
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        def progress_callback(current, total, message):
                            progress_bar.progress(current / total)
                            status_text.text(message)
                        
                        success = st.session_state.graphrag_handler.insert_documents(
                            st.session_state.processed_files,
                            progress_callback
                        )
                        
                        if success:
                            st.success("‚úÖ ƒê√£ th√™m t√†i li·ªáu v√†o GraphRAG th√†nh c√¥ng!")
                        else:
                            st.error("‚ùå L·ªói khi th√™m t√†i li·ªáu v√†o GraphRAG")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o GraphRAG tr∆∞·ªõc khi th√™m t√†i li·ªáu")
    
    with tab2:
        st.header("üîç Truy v·∫•n GraphRAG")
        
        if not st.session_state.graphrag_handler.is_initialized:
            st.warning("‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o GraphRAG tr∆∞·ªõc khi truy v·∫•n")
        else:
            # Query input
            query = st.text_input(
                "Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n:",
                placeholder="V√≠ d·ª•: T√†i li·ªáu n√†y n√≥i v·ªÅ ch·ªß ƒë·ªÅ g√¨?",
                help="Nh·∫≠p c√¢u h·ªèi ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin t·ª´ t√†i li·ªáu ƒë√£ x·ª≠ l√Ω"
            )
            
            col1, col2 = st.columns([1, 4])
            with col1:
                with_references = st.checkbox("Hi·ªÉn th·ªã references", value=True)
            
            with col2:
                if st.button("üîç T√¨m ki·∫øm", type="primary"):
                    if query:
                        with st.spinner("ƒêang t√¨m ki·∫øm..."):
                            result = st.session_state.graphrag_handler.query(
                                query, 
                                with_references=with_references
                            )
                            
                            if result:
                                # Add to query history
                                st.session_state.query_history.append(result)
                                
                                # Display result
                                st.subheader("üí° K·∫øt qu·∫£")
                                st.write(result['response'])
                                
                                # Display references if available
                                if with_references and result.get('references'):
                                    references_html = GraphVisualization.create_references_display(
                                        result['references']
                                    )
                                    st.markdown(references_html, unsafe_allow_html=True)
                            else:
                                st.error("‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán truy v·∫•n")
                    else:
                        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi")
            
            # Query history
            if st.session_state.query_history:
                st.subheader("üìú L·ªãch s·ª≠ Truy v·∫•n")
                
                # Create query history table
                history_df = GraphVisualization.create_query_results_table(
                    st.session_state.query_history
                )
                st.dataframe(history_df, use_container_width=True)
                
                # Clear history button
                if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠"):
                    st.session_state.query_history = []
                    st.rerun()
    
    with tab3:
        st.header("üìä Visualization")
        
        if not st.session_state.graphrag_handler.is_initialized:
            st.warning("‚ö†Ô∏è Vui l√≤ng kh·ªüi t·∫°o GraphRAG v√† th√™m t√†i li·ªáu tr∆∞·ªõc khi xem visualization")
        else:
            # Get graph info
            graph_info = st.session_state.graphrag_handler.get_graph_info()
            
            if graph_info:
                st.subheader("üìà Th·ªëng k√™ Graph")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Tr·∫°ng th√°i", "‚úÖ ƒê√£ kh·ªüi t·∫°o" if graph_info.get('is_initialized') else "‚ùå Ch∆∞a kh·ªüi t·∫°o")
                with col2:
                    st.metric("Working Directory", graph_info.get('working_dir', 'N/A'))
                with col3:
                    st.metric("C·∫≠p nh·∫≠t cu·ªëi", graph_info.get('timestamp', 'N/A')[:19] if graph_info.get('timestamp') else 'N/A')
                
                # File processing stats
                if st.session_state.processed_files:
                    file_types = {}
                    for f in st.session_state.processed_files:
                        file_type = f['type']
                        file_types[file_type] = file_types.get(file_type, 0) + 1
                    
                    stats = {'file_types': file_types}
                    fig = GraphVisualization.create_processing_stats(stats)
                    if fig.data:
                        st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‚ÑπÔ∏è Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
    
    with tab4:
        st.header("‚ÑπÔ∏è Th√¥ng tin ·ª®ng d·ª•ng")
        
        st.markdown("""
        ### üß† Fast GraphRAG Document Analyzer
        
        ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng **Fast GraphRAG** ƒë·ªÉ ph√¢n t√≠ch v√† truy v·∫•n t√†i li·ªáu m·ªôt c√°ch th√¥ng minh.
        
        #### ‚ú® T√≠nh nƒÉng ch√≠nh:
        - üìÅ **Upload ƒëa d·∫°ng lo·∫°i file**: TXT, PDF, DOCX, MD
        - üß† **Ph√¢n t√≠ch th√¥ng minh**: S·ª≠ d·ª•ng GraphRAG ƒë·ªÉ t·∫°o knowledge graph
        - üîç **Truy v·∫•n t·ª± nhi√™n**: H·ªèi ƒë√°p b·∫±ng ti·∫øng Vi·ªát
        - üìä **Visualization**: Hi·ªÉn th·ªã m·ªëi quan h·ªá gi·ªØa c√°c th·ª±c th·ªÉ
        - üìú **L·ªãch s·ª≠ truy v·∫•n**: L∆∞u tr·ªØ v√† qu·∫£n l√Ω c√°c c√¢u h·ªèi ƒë√£ h·ªèi
        
        #### üöÄ C√°ch s·ª≠ d·ª•ng:
        1. **C·∫•u h√¨nh**: Nh·∫≠p OpenAI API key v√† thi·∫øt l·∫≠p domain
        2. **Upload**: Ch·ªçn v√† upload c√°c file t√†i li·ªáu
        3. **X·ª≠ l√Ω**: Th√™m t√†i li·ªáu v√†o GraphRAG
        4. **Truy v·∫•n**: ƒê·∫∑t c√¢u h·ªèi v√† nh·∫≠n c√¢u tr·∫£ l·ªùi th√¥ng minh
        5. **Visualization**: Xem bi·ªÉu ƒë·ªì v√† th·ªëng k√™
        
        #### üîß C·∫•u h√¨nh:
        - **Domain**: M√¥ t·∫£ lƒ©nh v·ª±c v√† m·ª•c ti√™u ph√¢n t√≠ch
        - **Entity Types**: C√°c lo·∫°i th·ª±c th·ªÉ c·∫ßn nh·∫≠n di·ªán
        - **Example Queries**: C√¢u h·ªèi m·∫´u ƒë·ªÉ h∆∞·ªõng d·∫´n AI
        
        #### üìö Dependencies:
        - Fast GraphRAG: Framework ch√≠nh
        - OpenAI: Language model
        - Streamlit: Web interface
        - Plotly: Visualization
        - NetworkX: Graph processing
        """)
        
        # System info
        st.subheader("üîß Th√¥ng tin H·ªá th·ªëng")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            **C·∫•u h√¨nh:**
            - Working Directory: `{Config.WORKING_DIR}`
            - Max File Size: {Config.MAX_FILE_SIZE / (1024*1024):.0f}MB
            - Supported Extensions: {', '.join(Config.ALLOWED_EXTENSIONS)}
            """)
        
        with col2:
            st.markdown(f"""
            **Tr·∫°ng th√°i:**
            - GraphRAG Initialized: {'‚úÖ' if st.session_state.graphrag_handler.is_initialized else '‚ùå'}
            - Files Processed: {len(st.session_state.processed_files)}
            - Queries Made: {len(st.session_state.query_history)}
            """)

if __name__ == "__main__":
    main()
